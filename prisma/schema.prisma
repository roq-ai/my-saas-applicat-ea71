generator client {
  provider = "prisma-client-js"
  previewFeatures = ["clientExtensions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model data_source {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name        String   @db.VarChar
  description String?  @db.VarChar
  image       String?  @db.VarChar
  file_path   String   @db.VarChar
  user_id     String   @db.Uuid
  created_at  DateTime @default(now()) @db.Timestamp(6)
  updated_at  DateTime @default(now()) @db.Timestamp(6)
  user        user     @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model flashcard_deck {
  id                 String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name               String         @db.VarChar
  description        String?        @db.VarChar
  image              String?        @db.VarChar
  learning_group_id  String         @db.Uuid
  content_creator_id String         @db.Uuid
  created_at         DateTime       @default(now()) @db.Timestamp(6)
  updated_at         DateTime       @default(now()) @db.Timestamp(6)
  user               user           @relation(fields: [content_creator_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  learning_group     learning_group @relation(fields: [learning_group_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model group_member {
  id                String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id           String         @db.Uuid
  learning_group_id String         @db.Uuid
  role              String         @db.VarChar
  created_at        DateTime       @default(now()) @db.Timestamp(6)
  updated_at        DateTime       @default(now()) @db.Timestamp(6)
  learning_group    learning_group @relation(fields: [learning_group_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user              user           @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model learning_group {
  id             String           @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name           String           @db.VarChar
  description    String?          @db.VarChar
  image          String?          @db.VarChar
  user_id        String           @db.Uuid
  created_at     DateTime         @default(now()) @db.Timestamp(6)
  updated_at     DateTime         @default(now()) @db.Timestamp(6)
  flashcard_deck flashcard_deck[]
  group_member   group_member[]
  user           user             @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model learning_schedule {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name        String   @db.VarChar
  description String?  @db.VarChar
  image       String?  @db.VarChar
  start_date  DateTime @db.Date
  end_date    DateTime @db.Date
  user_id     String   @db.Uuid
  created_at  DateTime @default(now()) @db.Timestamp(6)
  updated_at  DateTime @default(now()) @db.Timestamp(6)
  user        user     @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model user {
  id                String              @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email             String              @unique @db.VarChar(255)
  firstName         String?             @db.VarChar(255)
  lastName          String?             @db.VarChar(255)
  roq_user_id       String              @db.VarChar(255)
  tenant_id         String              @db.VarChar(255)
  created_at        DateTime            @default(now()) @db.Timestamp(6)
  updated_at        DateTime            @default(now()) @db.Timestamp(6)
  data_source       data_source[]
  flashcard_deck    flashcard_deck[]
  group_member      group_member[]
  learning_group    learning_group[]
  learning_schedule learning_schedule[]
}
